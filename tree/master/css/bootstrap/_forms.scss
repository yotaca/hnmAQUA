//
// Forms
// --------------------------------------------------
// Normalize non-controls
// Restyle and baseline non-control form elements.
fieldset {
	padding: 0;
	margin: 0;
	border: 0;
	min-width: 0;
}
legend {
	display: block;
	width: 100%;
	padding: 0;
	margin-bottom: $line-height-computed;
	font-size: ($font-size-base * 1.5);
	line-height: inherit;
	color: $legend-color;
	border: 0;
	border-bottom: 1px solid $legend-border-color;
}
label {
	display: inline-block;
	max-width: 100%;
	margin-bottom: 5px;
	font-weight: bold;
}
input[type="search"] {
	@include box-sizing(border-box);
}
input[type="radio"],
input[type="checkbox"] {
	margin: 4px 0 0;
	margin-top: 1px \9; // IE8-9
	line-height: normal;
}
input[type="file"] {
	display: block;
}
// Make range inputs behave like textual form controls
input[type="range"] {
	display: block;
	width: 100%;
}
// Make multiple select elements height not fixed
select[multiple],
select[size] {
	height: auto;
}
// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
	@include tab-focus;
}
// Adjust output element
output {
	display: block;
	padding-top: ($padding-base-vertical + 1);
	font-size: $font-size-base;
	line-height: $line-height-base;
	color: $input-color;
}

.form-control {
	display: block;
	width: 100%;
	height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
	padding: $padding-base-vertical $padding-base-horizontal;
	font-size: $font-size-base;
	line-height: $line-height-base;
	color: $input-color;
	background-color: $input-bg;
	background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
	border: 1px solid $input-border;
	border-radius: $input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
	@include box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
	@include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);
	// Customize the `:focus` state to imitate native WebKit styles.
	@include form-control-focus;
	// Placeholder
	@include placeholder;
	// Unstyle the caret on `<select>`s in IE10+.
	&::-ms-expand {
		border: 0;
		background-color: transparent;
	}
	&[disabled],
	&[readonly],
	fieldset[disabled] & {
		background-color: $input-bg-disabled;
		opacity: 1; 
	}
	&[disabled],
	fieldset[disabled] & {
		cursor: $cursor-disabled;
	}// [converter] extracted textarea& to textarea.form-control
}
// Reset height for `textarea`s
textarea.form-control {
	height: auto;
}
input[type="search"] {
	-webkit-appearance: none;
}
@media screen and (-webkit-min-device-pixel-ratio: 0) {
	input[type="date"],
	input[type="time"],
	input[type="datetime-local"],
	input[type="month"] {
		&.form-control {
			line-height: $input-height-base;
		}
		&.input-sm,
		.input-group-sm & {
			line-height: $input-height-small;
		}
		&.input-lg,
		.input-group-lg & {
			line-height: $input-height-large;
		}
	}
}
.form-group {
	margin-bottom: $form-group-margin-bottom;
}
.radio,
.checkbox {
	position: relative;
	display: block;
	margin-top: 10px;
	margin-bottom: 10px;
	label {
		min-height: $line-height-computed;
		padding-left: 20px;
		margin-bottom: 0;
		font-weight: normal;
		cursor: pointer;
	}
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
	position: absolute;
	margin-left: -20px;
	margin-top: 4px \9;
}
.radio + .radio,
.checkbox + .checkbox {
	margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}
// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
	position: relative;
	display: inline-block;
	padding-left: 20px;
	margin-bottom: 0;
	vertical-align: middle;
	font-weight: normal;
	cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
	margin-top: 0;
	margin-left: 10px; // space out consecutive inline controls
}
// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
	&[disabled],
	&.disabled,
	fieldset[disabled] & {
		cursor: $cursor-disabled;
	}
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
	&.disabled,
	fieldset[disabled] & {
		cursor: $cursor-disabled;
	}
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
	&.disabled,
	fieldset[disabled] & {
		label {
			cursor: $cursor-disabled;
		}
	}
}
// Static form control text
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.
.form-control-static {
	// Size it appropriately next to real form controls
	padding-top: ($padding-base-vertical + 1);
	padding-bottom: ($padding-base-vertical + 1);
	// Remove default margin from `p`
	margin-bottom: 0;
	min-height: ($line-height-computed + $font-size-base);
	&.input-lg,
	&.input-sm {
		padding-left: 0;
		padding-right: 0;
	}
}
@include input-size('.input-sm', $input-height-small, $padding-small-vertical, $padding-small-horizontal, $font-size-small, $line-height-small, $input-border-radius-small);
.form-group-sm {
	.form-control {
		height: $input-height-small;
		padding: $padding-small-vertical $padding-small-horizontal;
		font-size: $font-size-small;
		line-height: $line-height-small;
		border-radius: $input-border-radius-small;
	}
	select.form-control {
		height: $input-height-small;
		line-height: $input-height-small;
	}
	textarea.form-control,
	select[multiple].form-control {
		height: auto;
	}
	.form-control-static {
		height: $input-height-small;
		min-height: ($line-height-computed + $font-size-small);
		padding: ($padding-small-vertical + 1) $padding-small-horizontal;
		font-size: $font-size-small;
		line-height: $line-height-small;
	}
}
@include input-size('.input-lg', $input-height-large, $padding-large-vertical, $padding-large-horizontal, $font-size-large, $line-height-large, $input-border-radius-large);
.form-group-lg {
	.form-control {
		height: $input-height-large;
		padding: $padding-large-vertical $padding-large-horizontal;
		font-size: $font-size-large;
		line-height: $line-height-large;
		border-radius: $input-border-radius-large;
	}
	select.form-control {
		height: $input-height-large;
		line-height: $input-height-large;
	}
	textarea.form-control,
	select[multiple].form-control {
		height: auto;
	}
	.form-control-static {
		height: $input-height-large;
		min-height: ($line-height-computed + $font-size-large);
		padding: ($padding-large-vertical + 1) $padding-large-horizontal;
		font-size: $font-size-large;
		line-height: $line-height-large;
	}
}
// Form control feedback states
// Apply contextual and semantic states to individual form controls.
.has-feedback {
	// Enable absolute positioning
	position: relative;
	// Ensure icons don't overlap text
	.form-control {
		padding-right: ($input-height-base * 1.25);
	}
}
// Feedback icon (requires .glyphicon classes)
.form-control-feedback {
	position: absolute;
	top: 0;
	right: 0;
	z-index: 2; // Ensure icon is above input groups
	display: block;
	width: $input-height-base;
	height: $input-height-base;
	line-height: $input-height-base;
	text-align: center;
	pointer-events: none;
}
.input-lg + .form-control-feedback,
.input-group-lg + .form-control-feedback,
.form-group-lg .form-control + .form-control-feedback {
	width: $input-height-large;
	height: $input-height-large;
	line-height: $input-height-large;
}
.input-sm + .form-control-feedback,
.input-group-sm + .form-control-feedback,
.form-group-sm .form-control + .form-control-feedback {
	width: $input-height-small;
	height: $input-height-small;
	line-height: $input-height-small;
}
// Feedback states
.has-success {
	@include form-control-validation($state-success-text, $state-success-text, $state-success-bg);
}
.has-warning {
	@include form-control-validation($state-warning-text, $state-warning-text, $state-warning-bg);
}
.has-error {
	@include form-control-validation($state-danger-text, $state-danger-text, $state-danger-bg);
}
// Reposition feedback icon if input has visible label above
.has-feedback label {
	& ~ .form-control-feedback {
		top: ($line-height-computed + 5); // Height of the `label` and its margin
	}
	&.sr-only ~ .form-control-feedback {
		top: 0;
	}
}
.help-block {
	display: block; // account for any element using help-block
	margin-top: 5px;
	margin-bottom: 10px;
	color: lighten($text-color, 25%); // lighten the text some for contrast
}
@mixin form-inline {
	// Kick in the inline
	@media (min-width: $screen-sm-min) {
		// Inline-block all the things for "inline"
		.form-group {
			display: inline-block;
			margin-bottom: 0;
			vertical-align: middle;
		}
		// In navbar-form, allow folks to *not* use `.form-group`
		.form-control {
			display: inline-block;
			width: auto; // Prevent labels from stacking above inputs in `.form-group`
			vertical-align: middle;
		}
		// Make static controls behave like regular ones
		.form-control-static {
			display: inline-block;
		}
		.input-group {
			display: inline-table;
			vertical-align: middle;
			.input-group-addon,
			.input-group-btn,
			.form-control {
				width: auto;
			}
		}
		// Input groups need that 100% width though
		.input-group > .form-control {
			width: 100%;
		}
		.control-label {
			margin-bottom: 0;
			vertical-align: middle;
		}
		.radio,
		.checkbox {
			display: inline-block;
			margin-top: 0;
			margin-bottom: 0;
			vertical-align: middle;

			label {
				padding-left: 0;
			}
		}
		.radio input[type="radio"],
		.checkbox input[type="checkbox"] {
			position: relative;
			margin-left: 0;
		}
		.has-feedback .form-control-feedback {
			top: 0;
		}
	}
}
.form-inline {
	@include form-inline;
}
.form-horizontal {
	.radio,
	.checkbox,
	.radio-inline,
	.checkbox-inline {
		margin-top: 0;
		margin-bottom: 0;
		padding-top: ($padding-base-vertical + 1); // Default padding plus a border
	}
	.radio,
	.checkbox {
		min-height: ($line-height-computed + ($padding-base-vertical + 1));
	}
	.form-group {
		@include make-row;
	}
	@media (min-width: $screen-sm-min) {
		.control-label {
			text-align: right;
			margin-bottom: 0;
			padding-top: ($padding-base-vertical + 1); // Default padding plus a border
		}
	}
	.has-feedback .form-control-feedback {
		right: floor(($grid-gutter-width / 2));
	}
	.form-group-lg {
		@media (min-width: $screen-sm-min) {
			.control-label {
				padding-top: ($padding-large-vertical + 1);
				font-size: $font-size-large;
			}
		}
	}
	.form-group-sm {
		@media (min-width: $screen-sm-min) {
			.control-label {
				padding-top: ($padding-small-vertical + 1);
				font-size: $font-size-small;
			}
		}
	}
}
